#!/bin/bash

# === –ê—Ä–≥—É–º–µ–Ω—Ç—ã ===
STAGE="$1"
CORE_BRANCH="$2"
WEB_BRANCH="$3"
ADMIN_BRANCH="$4"
DOCKER_BRANCH="$5"

if [ -z "$STAGE" ]; then
  echo "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./deploy.sh <STAGE> [core_branch] [web_branch] [admin_branch] [docker_branch]"
  exit 1
fi

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TARGET_PATH="/var/www/$STAGE"
GIT_HOST="teblogelsouy.beget.app"
GIT_GROUP="carowebapp"

# === –ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ master, –µ—Å–ª–∏ –≤–µ—Ç–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã ===
CORE_BRANCH="${CORE_BRANCH:-master}"
WEB_BRANCH="${WEB_BRANCH:-master}"
ADMIN_BRANCH="${ADMIN_BRANCH:-master}"
DOCKER_BRANCH="${DOCKER_BRANCH:-master}"

# === –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –∏ –≤–µ—Ç–∫–∏ ===
REPOS=("service-core" "web" "admin-panel" "docker")
BRANCHES=("$CORE_BRANCH" "$WEB_BRANCH" "$ADMIN_BRANCH" "$DOCKER_BRANCH")

mkdir -p "$TARGET_PATH"

# === –§—É–Ω–∫—Ü–∏—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ===
sync_repo() {
  local name="$1"
  local branch="$2"
  local path="$TARGET_PATH/$name"

  if [ ! -d "$path/.git" ]; then
    echo "üì• –ö–ª–æ–Ω–∏—Ä—É–µ–º $name ($branch)..."
    git clone -b "$branch" "git@$GIT_HOST:$GIT_GROUP/$name.git" "$path"
  else
    echo "üîÅ –û–±–Ω–æ–≤–ª—è–µ–º $name ($branch)..."
    cd "$path"
    git fetch origin
    git checkout "$branch"
    git pull origin "$branch"
  fi
}

# === –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ / –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ ===
for i in "${!REPOS[@]}"; do
  sync_repo "${REPOS[$i]}" "${BRANCHES[$i]}"
done

# === –ö–æ–ø–∏—Ä—É–µ–º .env —Ñ–∞–π–ª –¥–ª—è docker ===
ENV_SOURCE="/var/www/env/.env.docker-$STAGE"
ENV_TARGET="$TARGET_PATH/docker/.env"

if [ -f "$ENV_SOURCE" ]; then
  echo "üì¶ –ö–æ–ø–∏—Ä—É–µ–º $ENV_SOURCE ‚Üí $ENV_TARGET"
  cp "$ENV_SOURCE" "$ENV_TARGET"
else
  echo "‚ö†Ô∏è  –§–∞–π–ª $ENV_SOURCE –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–µ–ø–ª–æ–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
  exit 1
fi

# === –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PORT_CORE –ø–æ STAGE ===
case "$STAGE" in
  d1) PORT_CORE=8081 ;;
  d2) PORT_CORE=8082 ;;
  d3) PORT_CORE=8083 ;;
  stage) PORT_CORE=8084 ;;
  *) PORT_CORE=8090 ;;
esac

# === –ü—É—Ç—å –¥–æ .env –≤–Ω—É—Ç—Ä–∏ service-core ===
CORE_ENV_PATH="$TARGET_PATH/service-core/.env"
DB_NAME="$STAGE"
DB_USER="$STAGE"
DB_PASSWORD="your_password_$STAGE"

# === –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ .env —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ===
if [ ! -f "$CORE_ENV_PATH" ]; then
  echo "‚ö†Ô∏è  .env –≤ $CORE_ENV_PATH –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π"
  touch "$CORE_ENV_PATH"
fi

# === –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î ===
sed -i "s/^DB_HOST=.*/DB_HOST=172.17.0.1/" "$CORE_ENV_PATH"
sed -i "s/^DB_PORT=.*/DB_PORT=5432/" "$CORE_ENV_PATH"
sed -i "s/^DB_USER=.*/DB_USER=$DB_USER/" "$CORE_ENV_PATH"
sed -i "s/^DB_PASSWORD=.*/DB_PASSWORD=$DB_PASSWORD/" "$CORE_ENV_PATH"
sed -i "s/^DB_NAME=.*/DB_NAME=$DB_NAME/" "$CORE_ENV_PATH"
sed -i "s/^SMTP_HOST=.*/SMTP_HOST=172.17.0.1/" "$CORE_ENV_PATH"


echo "üîß –û–±–Ω–æ–≤–ª–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ë–î –≤ $CORE_ENV_PATH"

# === –ó–∞–ø—É—Å–∫ docker compose ===
cd "$TARGET_PATH/docker"
echo "üßπ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker compose -f docker-compose.stage.yml down || true

echo "üöÄ –ó–∞–ø—É—Å–∫ docker-compose.stage.yml..."
docker compose -f docker-compose.stage.yml pull
docker compose -f docker-compose.stage.yml up -d --build


echo "‚úÖ –î–µ–ø–ª–æ–π $STAGE –∑–∞–≤–µ—Ä—à—ë–Ω"
